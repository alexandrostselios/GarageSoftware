// <auto-generated />
using System;
using GarageAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GarageAPI.Migrations
{
    [DbContext(typeof(GarageAPIDbContext))]
    partial class GarageAPIDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("GarageAPI.Models.CarManufacturer", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CarManufacturer");
                });

            modelBuilder.Entity("GarageAPI.Models.CarModel", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CarModels");
                });

            modelBuilder.Entity("GarageAPI.Models.CarModelManufacturerYear", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long>("CarManufacturerID")
                        .HasColumnType("bigint");

                    b.Property<long>("CarModelID")
                        .HasColumnType("bigint");

                    b.Property<long>("CarModelYearID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("CarManufacturerID");

                    b.HasIndex("CarModelID");

                    b.HasIndex("CarModelYearID");

                    b.ToTable("CarModelManufacturerYear");
                });

            modelBuilder.Entity("GarageAPI.Models.CarModelYear", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("CarModelYear");
                });

            modelBuilder.Entity("GarageAPI.Models.UserModels", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long?>("Color")
                        .HasColumnType("bigint");

                    b.Property<long?>("Kilometer")
                        .HasColumnType("bigint");

                    b.Property<string>("LicencePlate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ModelManufacturerYearIDID")
                        .HasColumnType("bigint");

                    b.Property<long>("ModelYearID")
                        .HasColumnType("bigint");

                    b.Property<int>("UserIDID")
                        .HasColumnType("int");

                    b.Property<string>("VIN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("ModelManufacturerYearIDID");

                    b.HasIndex("ModelYearID");

                    b.HasIndex("UserIDID");

                    b.ToTable("UserModels");
                });

            modelBuilder.Entity("GarageAPI.Models.Users", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EnableAccess")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserType")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GarageAPI.Models.CarModelManufacturerYear", b =>
                {
                    b.HasOne("GarageAPI.Models.CarManufacturer", "CarManufacturer")
                        .WithMany()
                        .HasForeignKey("CarManufacturerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageAPI.Models.CarModel", "CarModel")
                        .WithMany()
                        .HasForeignKey("CarModelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageAPI.Models.CarModelYear", "CarModelYear")
                        .WithMany()
                        .HasForeignKey("CarModelYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarManufacturer");

                    b.Navigation("CarModel");

                    b.Navigation("CarModelYear");
                });

            modelBuilder.Entity("GarageAPI.Models.UserModels", b =>
                {
                    b.HasOne("GarageAPI.Models.CarModelManufacturerYear", "ModelManufacturerYearID")
                        .WithMany()
                        .HasForeignKey("ModelManufacturerYearIDID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageAPI.Models.CarModelYear", "ModelYear")
                        .WithMany()
                        .HasForeignKey("ModelYearID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GarageAPI.Models.Users", "UserID")
                        .WithMany()
                        .HasForeignKey("UserIDID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ModelManufacturerYearID");

                    b.Navigation("ModelYear");

                    b.Navigation("UserID");
                });
#pragma warning restore 612, 618
        }
    }
}
